import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Assembunny {
	public static Map<String, Integer> registers = new HashMap<>();

	public static void main(String[] args) {
		List<String> input;

		try {
			input = Files.readAllLines(Paths.get("day12_data.txt"));
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Instructions are nowhere to be found");
			return;
			
			
		}
		
		solve(input, 1);
		solve(input, 2);
	}
	
	public static void solve(List<String> input, int step) {
		
		long start = System.currentTimeMillis();
		
		registers.put("a", 0);
		registers.put("b", 0);
		registers.put("c", step - 1);
		registers.put("d", 0);
		
		for(int i = 0; i < input.size(); i++){
			String[] line = input.get(i).split(" ");
			
			if (line[0].equals("cpy")){
				try {
					int x = Integer.parseInt(line[1]);
					registers.put(line[2], x);
				} catch (Exception e) {
					registers.put(line[2], registers.get(line[1]));
				}
			} else if (line[0].equals("inc")) {
				registers.put(line[1], registers.get(line[1]) + 1);
			} else if (line[0].equals("dec")) {
				registers.put(line[1], registers.get(line[1]) - 1);
			} else if (line[0].equals("jnz")){
				int x = 0;				
				try {
					x = Integer.parseInt(line[1]);
				} catch (Exception e) {
					x = registers.get(line[1]);
				} finally {					
					if(x != 0) {
						i += Integer.parseInt(line[2]) - 1;
					}
					
					if(i > input.size()) {
						break;
					}
				}
			}
			
			
		}
		
		long end = System.currentTimeMillis();
		
		System.out.printf("Step %d - value left in register 'a' is %d %n", step, registers.get("a"));
		System.out.printf("Step %d ran in %.2f seconds%n", step, (end-start)/1000.0f);
	}

}
